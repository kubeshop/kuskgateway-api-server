/*
 * Kusk Gateway API
 *
 * This is the Kusk Gateway Management API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	kusk "github.com/GIT_USER_ID/GIT_REPO_ID/kusk"
	"github.com/kubeshop/kusk-gateway/pkg/spec"
)

// ServicesApiService is a service that implements the logic for the ServicesApiServicer
// This service should implement the business logic for every endpoint for the ServicesApi API.
// Include any external packages or services that will be required by this service.
type ServicesApiService struct {
	kuskClient kusk.Client
}

// NewServicesApiService creates a default api service
func NewServicesApiService(kuskClient kusk.Client) ServicesApiServicer {
	return &ServicesApiService{
		kuskClient: kuskClient,
	}
}

// GetService - Get details for a single service
func (s *ServicesApiService) GetService(ctx context.Context, namespace string, name string) (ImplResponse, error) {
	_, err := s.kuskClient.GetSvc(namespace, name)
	status := "available"
	if err != nil {
		if !(err.Error() == fmt.Sprintf(`services "%s" not found`, name)) {
			return Response(http.StatusInternalServerError, err), err
		}
		status = "unavailable"
	}

	return Response(http.StatusOK, ServiceItem{
		Name:      name,
		Namespace: namespace,
		Status:    status,
	}), nil
}

// GetServices - Get a list of services
func (s *ServicesApiService) GetServices(ctx context.Context, namespace string) (ImplResponse, error) {
	apis, err := s.kuskClient.GetApis()
	if err != nil {
		return Response(http.StatusInternalServerError, err), err
	}

	services := []ServiceItem{}
	parser := spec.NewParser(nil)

	for _, api := range apis.Items {
		apiSpec, err := parser.ParseFromReader(strings.NewReader(api.Spec.Spec))
		if err != nil {
			return Response(http.StatusInternalServerError, nil), err
		}

		opts, err := spec.GetOptions(apiSpec)
		if err != nil {
			return Response(http.StatusInternalServerError, nil), err
		}

		serviceStatus := "available"
		if _, err := s.kuskClient.GetSvc(opts.Upstream.Service.Namespace, opts.Upstream.Service.Name); err != nil {
			serviceStatus = "unavailable"

		}
		services = append(services, ServiceItem{
			Name:      opts.Upstream.Service.Name,
			Namespace: opts.Upstream.Service.Namespace,
			Status:    serviceStatus,
		})

	}
	return Response(http.StatusOK, services), nil
}
