/*
 * Kusk Gateway API
 *
 * This is the Kusk Gateway Management API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"strings"

	"github.com/kubeshop/kusk-gateway/pkg/spec"
)

// GetService - Get details for a single service
func (s *ServicesApiService) GetService(ctx context.Context, namespace string, name string) (ImplResponse, error) {
	svc, err := s.kuskClient.GetSvc(namespace, name)
	if err != nil {
		return Response(http.StatusInternalServerError, err), err
	}

	return Response(http.StatusOK, ServiceItem{
		Name:      svc.Name,
		Namespace: svc.Namespace,
		Status:    "available",
	}), nil
}

// GetServices - Get a list of services
func (s *ServicesApiService) GetServices(ctx context.Context, namespace string) (ImplResponse, error) {
	apis, err := s.kuskClient.GetApis()
	if err != nil {
		return Response(http.StatusInternalServerError, err), err
	}
	services := []ServiceItem{}
	for _, api := range apis.Items {
		parser := spec.NewParser(nil)

		apiSpec, err := parser.ParseFromReader(strings.NewReader(api.Spec.Spec))

		if err != nil {
			return Response(http.StatusInternalServerError, nil), err
		}

		opts, err := spec.GetOptions(apiSpec)
		if err != nil {
			return Response(http.StatusInternalServerError, nil), err
		}

		_, err = s.kuskClient.GetSvc(opts.Upstream.Service.Namespace, opts.Upstream.Service.Name)
		status := "available"
		if err != nil {
			status = "unavailable"
		}
		services = append(services, ServiceItem{
			Name:      opts.Upstream.Service.Name,
			Namespace: opts.Upstream.Service.Namespace,
			Status:    status,
		})
	}
	return Response(http.StatusOK, services), nil
}
